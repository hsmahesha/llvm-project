; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=cfcss -S < %s | FileCheck %s

; CHECK: @cfcss.signature = global i64 undef
; CHECK: @cfcss.adjusting.signature = global i64 undef

define i32 @foo(i32 %ns) local_unnamed_addr {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    store i64 1, i64* @cfcss.signature, align 4
; CHECK-NEXT:    store i64 6, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    br label [[FOR_BODY_0:%.*]]
; CHECK:       for.body.0:
; CHECK-NEXT:    [[VEC_16_D_0:%.*]] = phi <16 x double> [ zeroinitializer, [[ENTRY:%.*]] ], [ [[VEC_16_D_5:%.*]], [[TMP29:%.*]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = xor i64 [[TMP0]], 5
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ne i64 [[TMP3]], 2
; CHECK-NEXT:    br i1 [[TMP4]], label [[ERR_EXIT:%.*]], label [[TMP5:%.*]]
; CHECK:       5:
; CHECK-NEXT:    store i64 [[TMP3]], i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[CMP_0:%.*]] = icmp eq i32 [[NS:%.*]], 1
; CHECK-NEXT:    store i64 4, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    br i1 [[CMP_0]], label [[FOR_BODY_5:%.*]], label [[FOR_BODY_1:%.*]]
; CHECK:       for.body.1:
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[TMP7:%.*]] = xor i64 [[TMP6]], 1
; CHECK-NEXT:    [[TMP8:%.*]] = icmp ne i64 [[TMP7]], 3
; CHECK-NEXT:    br i1 [[TMP8]], label [[ERR_EXIT]], label [[TMP9:%.*]]
; CHECK:       9:
; CHECK-NEXT:    store i64 [[TMP7]], i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[CMP_1:%.*]] = icmp eq i32 [[NS]], 2
; CHECK-NEXT:    br i1 [[CMP_1]], label [[FOR_BODY_4:%.*]], label [[FOR_BODY_2:%.*]]
; CHECK:       for.body.2:
; CHECK-NEXT:    [[TMP10:%.*]] = load i64, i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[TMP11:%.*]] = xor i64 [[TMP10]], 7
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ne i64 [[TMP11]], 4
; CHECK-NEXT:    br i1 [[TMP12]], label [[ERR_EXIT]], label [[TMP13:%.*]]
; CHECK:       13:
; CHECK-NEXT:    store i64 [[TMP11]], i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[CMP_2:%.*]] = icmp eq i32 [[NS]], 3
; CHECK-NEXT:    store i64 1, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    store i64 2, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    br i1 [[CMP_2]], label [[FOR_BODY_3:%.*]], label [[FOR_BODY_5]]
; CHECK:       for.body.3:
; CHECK-NEXT:    [[VEC_16_D_3_0:%.*]] = phi <16 x double> [ [[VEC_16_D_3_1:%.*]], [[TMP19:%.*]] ], [ [[VEC_16_D_0]], [[TMP13]] ]
; CHECK-NEXT:    [[I32_3_0:%.*]] = phi i32 [ [[I32_3_1:%.*]], [[TMP19]] ], [ 0, [[TMP13]] ]
; CHECK-NEXT:    [[TMP14:%.*]] = load i64, i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[TMP15:%.*]] = xor i64 [[TMP14]], 0
; CHECK-NEXT:    [[TMP16:%.*]] = load i64, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    [[TMP17:%.*]] = xor i64 [[TMP15]], [[TMP16]]
; CHECK-NEXT:    [[TMP18:%.*]] = icmp ne i64 [[TMP17]], 5
; CHECK-NEXT:    br i1 [[TMP18]], label [[ERR_EXIT]], label [[TMP19]]
; CHECK:       19:
; CHECK-NEXT:    store i64 [[TMP17]], i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[VEC_16_D_3_1]] = insertelement <16 x double> [[VEC_16_D_3_0]], double 0.000000e+00, i32 [[I32_3_0]]
; CHECK-NEXT:    [[I32_3_1]] = add nuw nsw i32 [[I32_3_0]], 1
; CHECK-NEXT:    [[CMP_3:%.*]] = icmp ult i32 [[I32_3_1]], 16
; CHECK-NEXT:    store i64 0, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    store i64 3, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    br i1 [[CMP_3]], label [[FOR_BODY_3]], label [[FOR_BODY_5]]
; CHECK:       for.body.4:
; CHECK-NEXT:    [[TMP20:%.*]] = load i64, i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[TMP21:%.*]] = xor i64 [[TMP20]], 5
; CHECK-NEXT:    [[TMP22:%.*]] = icmp ne i64 [[TMP21]], 6
; CHECK-NEXT:    br i1 [[TMP22]], label [[ERR_EXIT]], label [[TMP23:%.*]]
; CHECK:       23:
; CHECK-NEXT:    store i64 [[TMP21]], i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[DOUBLE_4:%.*]] = fadd contract double undef, 0x4162BB3FDD819BBB
; CHECK-NEXT:    [[VEC_16_D_4:%.*]] = insertelement <16 x double> undef, double [[DOUBLE_4]], i32 0
; CHECK-NEXT:    store i64 0, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    br label [[FOR_BODY_5]]
; CHECK:       for.body.5:
; CHECK-NEXT:    [[VEC_16_D_5]] = phi <16 x double> [ zeroinitializer, [[TMP5]] ], [ undef, [[TMP13]] ], [ [[VEC_16_D_3_1]], [[TMP19]] ], [ [[VEC_16_D_4]], [[TMP23]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = load i64, i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[TMP25:%.*]] = xor i64 [[TMP24]], 1
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    [[TMP27:%.*]] = xor i64 [[TMP25]], [[TMP26]]
; CHECK-NEXT:    [[TMP28:%.*]] = icmp ne i64 [[TMP27]], 7
; CHECK-NEXT:    br i1 [[TMP28]], label [[ERR_EXIT]], label [[TMP29]]
; CHECK:       29:
; CHECK-NEXT:    store i64 [[TMP27]], i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[I32_5:%.*]] = sub nuw i32 [[NS]], 1
; CHECK-NEXT:    [[CMP_5:%.*]] = icmp eq i32 [[I32_5]], 0
; CHECK-NEXT:    store i64 0, i64* @cfcss.adjusting.signature, align 4
; CHECK-NEXT:    br i1 [[CMP_5]], label [[EXIT:%.*]], label [[FOR_BODY_0]]
; CHECK:       exit:
; CHECK-NEXT:    [[TMP30:%.*]] = load i64, i64* @cfcss.signature, align 4
; CHECK-NEXT:    [[TMP31:%.*]] = xor i64 [[TMP30]], 15
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i64 [[TMP31]], 8
; CHECK-NEXT:    br i1 [[TMP32]], label [[ERR_EXIT]], label [[TMP33:%.*]]
; CHECK:       33:
; CHECK-NEXT:    store i64 [[TMP31]], i64* @cfcss.signature, align 4
; CHECK-NEXT:    ret i32 0
; CHECK:       err.exit:
; CHECK-NEXT:    call void @cttErr()
; CHECK-NEXT:    ret i32 undef
;
entry:
  br label %for.body.0

for.body.0:                                         ; preds = %for.body.5, %entry
  %vec.16.d.0 = phi <16 x double> [ zeroinitializer, %entry ], [ %vec.16.d.5, %for.body.5 ]
  %cmp.0 = icmp eq i32 %ns, 1
  br i1 %cmp.0, label %for.body.5, label %for.body.1

for.body.1:                                      ; preds = %for.body
  %cmp.1 = icmp eq i32 %ns, 2
  br i1 %cmp.1, label %for.body.4, label %for.body.2

for.body.2:                                      ; preds = %for.body.1
  %cmp.2 = icmp eq i32 %ns, 3
  br i1 %cmp.2, label %for.body.3, label %for.body.5

for.body.3:                                      ; preds = %for.body.3, %for.body.2
  %vec.16.d.3.0 = phi <16 x double> [ %vec.16.d.3.1, %for.body.3 ], [ %vec.16.d.0, %for.body.2 ]
  %i32.3.0 = phi i32 [ %i32.3.1, %for.body.3 ], [ 0, %for.body.2 ]
  %vec.16.d.3.1 = insertelement <16 x double> %vec.16.d.3.0, double 0.000000e+00, i32 %i32.3.0
  %i32.3.1 = add nuw nsw i32 %i32.3.0, 1
  %cmp.3 = icmp ult i32 %i32.3.1, 16
  br i1 %cmp.3, label %for.body.3, label %for.body.5

for.body.4:                                      ; preds = %for.body.1
  %double.4 = fadd contract double undef, 0x4162BB3FDD819BBB
  %vec.16.d.4 = insertelement <16 x double> undef, double %double.4, i32 0
  br label %for.body.5

for.body.5:                                      ; preds = %for.body.0, %for.body.2, %for.body.3, %for.body.4
  %vec.16.d.5 = phi <16 x double> [ zeroinitializer, %for.body.0 ], [ undef, %for.body.2 ], [ %vec.16.d.3.1, %for.body.3 ], [ %vec.16.d.4, %for.body.4 ]
  %i32.5 = sub nuw i32 %ns, 1
  %cmp.5 = icmp eq i32 %i32.5, 0
  br i1 %cmp.5, label %exit, label %for.body.0

exit:
  ret i32 0
}

; CHECK: define void @cttErr() {
; CHECK: entry:
; CHECK:   call void @exit()
; CHECK:   ret void
; CHECK: }

; CHECK: declare void @exit()
